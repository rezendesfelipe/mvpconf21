stages:

# ------------
# Detect Drift
# ------------

- stage: terraformStage
  displayName: Detect Drift
  jobs:
  - job: terraformJob
    displayName: Terraform Plan
    steps:
    # terraform plan
    # --------------
    - template: ../steps/terraform-init.yaml
    - bash: |
        # Remember Exit Code
        set -uo pipefail

        # Run `terraform plan` and save output (used later for posting to GitHub)
        if terraform plan -detailed-exitcode -var superadmins_aad_object_id=$AAD_SUPERADMINS_GROUP_ID \
            | tee plan-output.txt \
            exit ${PIPESTATUS[0]}
        then
          echo "üü¢ No configuration drift detected"
          echo "##vso[task.setvariable variable=exitCode;isOutput=true]zero"
        else
          tf_exit_code=$?
          echo "‚ö†Ô∏è Configuration drift detected"
          echo "##vso[task.setvariable variable=exitCode;isOutput=true]non-zero"
          exit $tf_exit_code
        fi
      displayName: Terraform - Detect configuration drift
      name: planStep
      env:
        ARM_SUBSCRIPTION_ID:        $(kv-arm-subscription-id)
        ARM_CLIENT_ID:              $(kv-arm-client-id)
        ARM_CLIENT_SECRET:          $(kv-arm-client-secret)
        ARM_TENANT_ID:              $(kv-arm-tenant-id)
        AZDO_ORG_SERVICE_URL:       $(kv-azure-devops-org-url)
        AZDO_PERSONAL_ACCESS_TOKEN: $(kv-azure-devops-pat)
        AAD_SUPERADMINS_GROUP_ID:   $(kv-aad-superadmins-group-id)

    # Save plan output
    # ----------------
    - publish: ./plan-output.txt
      artifact: terraformPlanOutput
      displayName: Save 'terraform plan' output
      condition: succeededOrFailed()


# ---------------------------
# Post Status to Pull Request
# ---------------------------

- stage: pullRequestCommentStage
  displayName: Add Results to Pull Request
  condition: and(succeededOrFailed(), eq(variables.isPR, 'True'))
  variables:
    githubRepoName:       Azure/devops-governance
    githubConnectionName: e2e-governance-demo
    exitCode:             $[ stageDependencies.terraformStage.terraformJob.outputs['planStep.exitCode'] ]
    # artifactName:         terraformPlanOutput # Debugging, unused for now
  jobs:
  - job: postCommentJob
    displayName: Post to GitHub
    steps:

    # Add Comment - No Drift
    # ----------------------
    - task: GitHubComment@0
      condition: eq(variables.exitCode, 'zero')
      displayName: Post - No Drift
      inputs:
        gitHubConnection: ${{ variables.githubConnectionName }}
        repositoryName: $(githubRepoName)
        comment: |
          ### üü¢ &nbsp;No configuration drift detected

          Source Version: $(Build.SourceVersion)

    # Add Comment - Drift detected
    # ----------------------------
    - task: GitHubComment@0
      condition: eq(variables.exitCode, 'non-zero')
      displayName: Post - Has Drift
      inputs:
        gitHubConnection: ${{ variables.githubConnectionName }}
        repositoryName: $(githubRepoName)
        comment: |
          ### ‚ö†Ô∏è &nbsp;Configuration Drift Detected (_OR_ State File Locked)

          Source Version: $(Build.SourceVersion)

          Approving this Pull Request may result in destructive changes to your Azure resources. Please review the `terraform plan` output diff at Azure Pipelines Build Result Page.

          Proceed with caution!

  # Debugging - turns out multiline variables not supported
  # -------------
  # - job: debugOutput
  #   displayName: Debug Output
  #   steps:
  #   - download: current  # current pipeline
  #     artifact: $(artifactName)
  #     patterns: '*'
  #     displayName: Download 'terraform plan' output

  #   - bash: |
  #       ls $(Pipeline.Workspace)
  #       cat $(Pipeline.Workspace)/$(artifactName)/plan-output.txt
  #     displayName: output download file

    # Step - work in progress
    # We can pass output to downstream stage/job.
    # But we lose newlines, making output useless for markdown.
    # Todo: create own task that reads comment contents from a file.
    # - bash: echo $(planOutput)
    #   displayName: Debug - plan output

    # Step - work in progress
    # Multiline variables are not supported in Azure DevOps üòï
    # - bash: |
    #     oneliner=$(printf "%s " $(sed -e 's/$/&\\n/' ./plan-output.txt))
    #     echo $oneliner
    #     echo "====="
    #     echo "##vso[task.setvariable variable=planOutput;isOutput=true]$(echo $oneliner)"
    #   displayName: Save plan output (wip)
    #   name: outputPlanStep
    #   condition: always()