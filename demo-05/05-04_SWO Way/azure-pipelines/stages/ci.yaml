trigger:
  branches:
    include:
    - main
    exclude:
    - /*
  paths:  
    exclude:
    - docs/*
    - documents/*
    - .devcontainer/*
stages:
- stage: CIStage
  displayName: Continuous Integration
  jobs:
  - job: Terraform_Init
    displayName: terraform init
    steps:
      - bash: |
          export ARM_CLIENT_ID=$(APP_ID)
          export ARM_CLIENT_SECRET=$(CLIENT_SECRET)
          export ARM_TENANT_ID=$(TENANT_ID)
          export ARM_SUBSCRIPTION_ID=$(SUBSCRIPTION_ID)
          az login --service-principal -u $(APP_ID) -p $(PASSWORD) -t $(TENANT_ID)
          terraform init -reconfigure \
            -backend-config="resource_group_name=$BACKEND_RESOURCE_GROUP" \
            -backend-config="subscription_id=$SUBSCRIPTION_ID" \
            -backend-config="storage_account_name=$STORAGE_ACCOUNT_NAME" \
            -backend-config="container_name=$CONTAINER_NAME" \
            -backend-config="key=$KEY" \
            -backend-config="access_key=$ACCESS_KEY"
        displayName: terraform Init
  - job: Terraform_Plan
    displayName: terraform plan
    steps:
      - bash: |
          export ARM_CLIENT_ID=$(APP_ID)
          export ARM_CLIENT_SECRET=$(CLIENT_SECRET)
          export ARM_TENANT_ID=$(TENANT_ID)
          export ARM_SUBSCRIPTION_ID=$(SUBSCRIPTION_ID)
          az login --service-principal -u $(APP_ID) -p $(PASSWORD) -t $(TENANT_ID)
          terraform init -reconfigure \
            -backend-config="resource_group_name=$BACKEND_RESOURCE_GROUP" \
            -backend-config="subscription_id=$SUBSCRIPTION_ID" \
            -backend-config="storage_account_name=$STORAGE_ACCOUNT_NAME" \
            -backend-config="container_name=$CONTAINER_NAME" \
            -backend-config="key=$KEY" \
            -backend-config="access_key=$ACCESS_KEY"
      - task: TerraformCLI@0
        inputs:
          command: 'plan'
          environmentServiceName: 'ccs-dev-001(16c31411-1945-45d6-8b0e-6d63a1dbb52f)'
          commandOptions: '-out=$(System.DefaultWorkingDirectory)/plan/main.tfplan -detailed-exitcode'
          allowTelemetryCollection: true
          publishPlanResults: 'Terraform Plan'
        
      # - task: TerraformCLI@0
      #   inputs:
      #         command: "show"
      #         environmentServiceName: 'ccs-dev-001(16c31411-1945-45d6-8b0e-6d63a1dbb52f)'
      #         inputTargetPlanOrStateFilePath: "$(System.DefaultWorkingDirectory)/terraform.tfplan"
      #   displayName: "Run > terraform show"
    
      - bash: |
              if [ "$TERRAFORM_PLAN_HAS_CHANGES" = true ] && [ "$TERRAFORM_PLAN_HAS_DESTROY_CHANGES" = false ] ; then
                echo "##vso[task.setvariable variable=HAS_CHANGES_ONLY;isOutput=true]true"
                echo "##vso[task.logissue type=warning]Changes with no destroys detected, it is safe for the pipeline to proceed automatically"
                fi
              if [ "$TERRAFORM_PLAN_HAS_CHANGES" = true ] && [ "$TERRAFORM_PLAN_HAS_DESTROY_CHANGES" = true ] ; then
                echo "##vso[task.setvariable variable=HAS_DESTROY_CHANGES;isOutput=true]true"
                echo "##vso[task.logissue type=warning]Changes with Destroy detected, pipeline will require a manual approval to proceed"
                fi
              if [ "$TERRAFORM_PLAN_HAS_CHANGES" != true ] ; then
                echo "##vso[task.logissue type=warning]No changes detected, terraform apply will not run"
              fi              
        name: "setvar"
        displayName: "Vars > Set Variables for next stage"  

- stage: "runCheckov"
  displayName: "Checkov - Scan Terraform files"
  jobs:
      - job: "runCheckov"
        displayName: "Checkov > Pull, run and publish results of Checkov scan"
        steps:
          - bash: |
              export ARM_CLIENT_ID=$(APP_ID)
              export ARM_CLIENT_SECRET=$(CLIENT_SECRET)
              export ARM_TENANT_ID=$(TENANT_ID)
              export ARM_SUBSCRIPTION_ID=$(SUBSCRIPTION_ID)
              az login --service-principal -u $(APP_ID) -p $(PASSWORD) -t $(TENANT_ID)
              terraform init -reconfigure \
                -backend-config="resource_group_name=$BACKEND_RESOURCE_GROUP" \
                -backend-config="subscription_id=$SUBSCRIPTION_ID" \
                -backend-config="storage_account_name=$STORAGE_ACCOUNT_NAME" \
                -backend-config="container_name=$CONTAINER_NAME" \
                -backend-config="key=$KEY" \
                -backend-config="access_key=$ACCESS_KEY"
              terraform plan -out=$(System.DefaultWorkingDirectory)/plan/main.tf
            workingDirectory: $(System.DefaultWorkingDirectory)
            displayName: "Pull > bridgecrew/checkov"
          - bash: |
              docker run \
                --volume $(pwd):/tf bridgecrew/checkov \
                --directory /tf \
                --output junitxml \
                --soft-fail > $(pwd)/CheckovReport.xml  
            workingDirectory: $(System.DefaultWorkingDirectory)
            displayName: "Run > checkov"

          - task: PublishTestResults@2
            inputs:
              testRunTitle: "Checkov Results"
              failTaskOnFailedTests: false
              testResultsFormat: "JUnit"
              testResultsFiles: "CheckovReport.xml"
              searchFolder: "$(System.DefaultWorkingDirectory)"
              publishRunAttachments: true
            displayName: "Publish > Checkov scan results"

 # Clean up any of the containers / images that were used for quality checks
          - bash: |
              docker rmi "bridgecrew/checkov" -f | true
            displayName: 'Remove Terraform Quality Check Docker Images'
            condition: always()
          # - task: PublishTestResults@2
          #   displayName: Publish Checkov Test Results
          #   condition: succeededOrFailed()
          #   inputs:
          #           testResultsFormat: "JUnit" # Options JUnit, NUnit, VSTest, xUnit, cTest
          #           testResultsFiles: "/Checkov-Report.xml"
          #           searchFolder: "$(System.DefaultWorkingDirectory)/CheckovReport"
          #           mergeTestResults: false
          #           testRunTitle: Checkov Scan
          #           failTaskOnFailedTests: false
          #           publishRunAttachments: true

          #       # Clean up any of the containers / images that were used for quality checks
          # - bash: |
          #         docker rmi "bridgecrew/checkov" -f | true
          #   displayName: 'Remove Terraform Quality Check Docker Images'
          #   condition: always()

# - stage: "autoTerraform"
#   displayName: "Terraform - Auto Approval"
#   dependsOn:
#       - "planTerraform"
#   condition: |
#       and
#         (
#           succeeded(),
#           eq(dependencies.planTerraform.outputs['TerraformJobs.setvar.HAS_CHANGES_ONLY'], 'true')
#         )      
#   jobs: 
#      - job: "TerraformAuto"
#        displayName: "Terraform > init & apply"
#        steps: 
#         - bash: |
#               export ARM_CLIENT_ID=$(APP_ID)
#               export ARM_CLIENT_SECRET=$(CLIENT_SECRET)
#               export ARM_TENANT_ID=$(TENANT_ID)
#               export ARM_SUBSCRIPTION_ID=$(SUBSCRIPTION_ID)
#               az login --service-principal -u $(APP_ID) -p $(PASSWORD) -t $(TENANT_ID)
#               terraform init -reconfigure \
#                 -backend-config="resource_group_name=$BACKEND_RESOURCE_GROUP" \
#                 -backend-config="subscription_id=$SUBSCRIPTION_ID" \
#                 -backend-config="storage_account_name=$STORAGE_ACCOUNT_NAME" \
#                 -backend-config="container_name=$CONTAINER_NAME" \
#                 -backend-config="key=$KEY" \
#                 -backend-config="access_key=$ACCESS_KEY"
#               terraform apply main.tfplan
#           workingDirectory: $(System.DefaultWorkingDirectory)

