parameters:
  - name: jobName
    type: string
    default: planJob
  - name: environment
    type: string
  - name: shouldAttachPlanToExtensionTab
    type: boolean
    default: true
  - name: planArtifactName
    type: string
  - name: markDownArtifactName
    type: string
  - name: shouldPublishPlanArtifact
    type: boolean
    default: true

jobs:
  - job: ${{ parameters.jobName }}
    variables:
      - template: ../cd.variables.environment.${{ lower(parameters.environment) }}.yaml
      - template: iac-variables.yaml
      - group: ${{ parameters.environment }}
      - name: AttachmentName
        value: "tfplan"
    steps:
      - template: step.terraform.initializer.yml
        parameters:
          terraformArtifactName: $(terraformArtifactName)
          iacCiPipelineName: $(iacCiPipelineName)
          terraformVersion: $(terraformVersion)
          serviceConnection: ${{ variables.azureServiceConnectionName }}
          resourceGroupTerraformState: $(tfStateResourceGroupName)
          storageAccountTerraformState: $(tfStateAzureStorageAccountName)
          containerTerraformState: $(tfStateContainerName)
      
      - task: TerraformTaskV2@2
        displayName: "Terraform Plan"
        inputs:
          provider: "azurerm"
          command: "plan"
          commandOptions: -out=$(AttachmentName).out -var="public_key=$(public_key)"
          environmentServiceNameAzureRM: ${{ variables.azureServiceConnectionName }}
          workingDirectory: "$(System.ArtifactsDirectory)/$(terraformArtifactName)"
        env:
          TF_VAR_resource_group_name: $(RESOURCE_GROUP_INFRASTRUCTURE)
          TF_VAR_environment: ${{ parameters.environment }}
          #TF_VAR_vnet_name: $(VNET_NAME)
          #TF_VAR_cluster_name: $(AKS_CLUSTER_NAME)
          #TF_VAR_acr_name: $(ACR_NAME)
      
      - task: Bash@3
        displayName: "Create Terraform Plan markdown"
        inputs:
          targetType: "inline"
          workingDirectory: "$(System.ArtifactsDirectory)/$(terraformArtifactName)"
          script: |
            set -eu
            terraform show $(AttachmentName).out -no-color > $(AttachmentName).temp
            echo "\`\`\` json$(cat ./$(AttachmentName).temp)\`\`\`" > $(AttachmentName).md
      
      - task: Bash@3
        enabled: ${{ parameters.shouldAttachPlanToExtensionTab }}
        displayName: "Save Terraform Plan markdown"
        inputs:
          targetType: "inline"
          workingDirectory: "$(System.ArtifactsDirectory)/$(terraformArtifactName)"
          script: |
            set -eu
            echo "##vso[task.addattachment type=Distributedtask.Core.Summary;name=${{ parameters.environment }};]$(System.ArtifactsDirectory)/$(terraformArtifactName)/$(AttachmentName).md"
      
      - task: PublishPipelineArtifact@1
        displayName: "Publish Terraform Plan Markdown"
        inputs:
          targetPath: "$(System.ArtifactsDirectory)/$(terraformArtifactName)/$(AttachmentName).md"
          artifact: "${{ parameters.markDownArtifactName }}"
          publishLocation: "pipeline"
      
      - task: PublishPipelineArtifact@1
        displayName: "Publish Terraform Plan"
        enabled: ${{ parameters.shouldPublishPlanArtifact }}
        inputs:
          targetPath: "$(System.ArtifactsDirectory)/$(terraformArtifactName)/$(AttachmentName).out"
          artifact: "${{ parameters.planArtifactName }}"
          publishLocation: "pipeline"
